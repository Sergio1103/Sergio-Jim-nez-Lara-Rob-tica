# Import libraries and packages
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np

# create the fig and ax objects to handle figure and axes of the fixed frame
fig,ax = plt.subplots()

# Use 3d view 
ax = plt.axes(projection = "3d")



def setaxis(x1, x2, y1, y2, z1, z2):
    # this function is used to fix the view to the values of input arguments
    # -----------------------------------------------------------------------
    # ARGUMENTS
    # x1, x2 -> numeric value
    # y1, y2 -> numeric value
    # y1, z2 -> numeric value
    # -----------------------------------------------------------------------
    ax.set_xlim3d(x1,x2)
    ax.set_ylim3d(y1,y2)
    ax.set_zlim3d(z1,z2)
    ax.view_init(elev=30, azim=40)


def fix_system(axis_length):
    # Fix system function 
    # Plots a 3D centered at [x,y,z] = [0,0,0]
    # -------------------------------------------------------------------
    # Arguments 
    # axis_length -> used to specify the length of the axis, in this case
    #                all axes are of the same length
    # -------------------------------------------------------------------
    x = [-axis_length, axis_length] #Esto es porque ya el valor inicial no es cero, sino que es un valor negativo (-2) en x.
    y = [-axis_length, axis_length] #Esto es porque ya el valor inicial no es cero, sino que es un valor negativo (-2) en y.
    z = [-axis_length, axis_length] #Esto es porque ya el valor inicial no es cero, sino que es un valor negativo (-2) en z.
    zp = [0, 0]
    ax.plot3D(x, zp, zp, color='red')
    ax.plot3D(zp, y, zp, color='blue')
    ax.plot3D(zp, zp, z, color='green')
    

def sind(t):
    # sind function
    # Computes the sin() trigonometric function in degrees
    # ----------------------------------------------------------------------
    # Arguments
    # t -> Numeric, angle in degrees. 
    # ----------------------------------------------------------------------
    res = np.sin(t*np.pi/180)
    return res

def cosd(t):
    # sind function
    # Computes the cos() trigonometric function in degrees
    # ----------------------------------------------------------------------
    # Arguments
    # t -> Numeric, angle in degrees. 
    # ----------------------------------------------------------------------
    res = np.cos(t*np.pi/180)
    return res


def RotZ(t):
    Rz = np.array(([1,0,0],[0,cosd(t),-sind(t)],[0,sind(t),cosd(t)]))
    return Rz

def drawVector(v):
    deltaX = [0, v[0]]
    deltaY = [0, v[1]]
    deltaZ = [0, v[2]]
    ax.plot3D(deltaX, deltaY, deltaZ,color='orange')
    #plt.draw()
    #plt.pause(0.001)

def rotate(t): #Es un stop motion animation, borra cada que una posición cambia para representar el movimiento.
    n = 0 #Defino que sea cero, porque es la condicion inicial.
    while n < t: #Mientras n sea menor o diferente a t se hará la animación.
        ax.cla() #Limpia todo, es el que borra lo que paso antes de dibujar
        # Set the view 
        setaxis(-1,1,-1,1,-1,1) #Ajustar la camara 

        # plot the axis
        fix_system(1) #Dibuja las lineas.

        # draw vector1
        v1 = np.array([0,1,1])
        drawVector(v1) #Dibuja el vector inicial 

        # draw vector2
        v2 = RotZ(n).dot(v1) #Rota el vector rotado el angulo que N indique.
        drawVector(v2)

        n = n + 1 #Es el aumento automático de N hasta que N=T, 
        plt.draw() #Que lo dibuje
        plt.pause(0.001) #Es una pausa, para que se vea el efecto. Sin esto no veríamos nada.

#Aqui terminan las funciones

#Empiezan ya la recolección de datos#

rotate(45) #El numero de grados es el numero de veces que el bucle while va a funcionar antes de para porque N sigue siendo menor a T.


# show image.
plt.draw()
plt.show()